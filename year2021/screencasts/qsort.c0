

void sort(int [] arr, int from, int to);
/*
 * int a, b;
 * a < b
 * a == b
 * a > b
 */

typedef void *any_t;

void sort(any_t [] arr, int from, int to);

typedef struct Record *myrec_t;
myrec_t [] arr;

void *[] varr;

for (int i = 0; i < N; i++) {
    varr[i] = (void*)arr[i];
}

sort(varr, from, to);

int compare(void *a, void *b);
/*
 * Returns -1 if the ordering is such that a < b.
 * Returns 0 if the ordering is such that a == b.
 * Returns 1 if the ordering is such that a > b.
 */

void sort(any_t [] arr, int from, int to, compare_t compare) {
    .....
    if (compare(arr[i], arr[j]) == -1) {
            ....
    }
    .....
}

sort(varr, from, to, mycompare); // PSEUDO CODE

// "function pointers".

typedef int compare_t(void *a, void *b); // C1

typedef int (*compare_t)(void *a, void *b); // C

int mycompare(void *a, void *b) {
    struct Record *ar = (struct Record *)a;
    struct Record *br = (struct Record *)b;
    if (ar->grade < br->grade) { return -1; }
    ....
}

sort(varr, from, to, &mycompare);

// &mycompare => Take a function and get its "address".
//




void sort(any_t [] arr, int from, int to, compare_t compare);
typedef int compare_t(any_t a, any_t b);


typedef bool lessthan_t(any_t a, any_t b); 
typedef bool equals_t(any_t a, any_t b); 
typedef bool greaterthan_t(any_t a, any_t b); 

a < b and b < c => a < c
compare(a,b) == -1 and compare(b,c) == -1 then compare(a,c) must be -1
compare(a,b) == 1 and compare(b,c) == 1 then compare(a,c) must be 1
comapre(a,b) == 0 and compare(b,c) == 0 then compare(a,c) must be 0


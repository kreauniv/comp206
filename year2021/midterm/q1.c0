/*
 * Applying search to curve lookup.
 *
 * You've seen how search is implemented on a sorted array. For this problem,
 * you'll be implementing search in order to perform a "table lookup". In some
 * situations, a particular function may be too complex to compute whenever
 * needed. In such cases, engineers create "lookup tables" (not unlike Clark's
 * tables) where values of y are tabulated against values of x given in
 * ascending order. Here your task is to implement such a lookup table that
 * evaluates a "piecewise linear function".
 *
 * Given such a table as an array of pointers to XY pair structure, assuming
 * that the array is sorted in ascending order of x, you're tasked with writing
 * a "lookup" function that will take an x value, scan the table and produce a
 * y value accoridng to the following rules -
 *
 * 1. if the given x is less than the x of the first element, return the y of
 * the first element.
 *
 * 2. if the given x is greater than the x of the last element, return the y of
 * the last element.
 *
 * 3. If the given x satisfies table[i]->x <= x < table[i+1]->x for some i,
 * then return interpolate(table[i], table[i+1], x). For the purpose of this
 * problem, you can ignore integer overflow errors that may occur.
 *
 * 4. In case table[i+1]->x turns out to be equal to table[i]->x for some i,
 * then if the given x matches table[i]->x (and therefore matches
 * table[i+1]->x), the result returned must be table[i+1]->y.
 *
 * You will need to fill in the pre and post condition functions and also write
 * any loop invariants if you are writing loops. You're welcome to use any
 * algorithm. Faster algorithms get more points.
 *
 * For example, if the array consists of 3 elements with the following (x,y)
 * pairs - [(2,10), (12,50), (22, 70)] - then giving an x <= 2 should result in
 * 10, giving an x >= 22 should result in 70, and (for example) giving x = 7
 * should result in 30, and x = 17 should result in 60. If the given x exactly
 * matches any of the xy pairs, then the corresponding y should be returned.
 *
 * Score: 20 points total. Based on tests passed.
 */

#use <conio>
#use "./utils.c0"

struct XYPair {
    int x;
    int y;
};

typedef struct XYPair *xy_t;


bool interpolate_precond(xy_t xy1, xy_t xy2, int x)
{
    // TODO: Implement this.
    return false;
}

bool interpolate_postcond(int result, xy_t xy1, xy_t xy2, int x)
{
    // TODO: Implement this.
    return false;
}

/*
 * Performs interpolation between two points (x1,y1) and (x2,y2)
 * given an x between them.
 *
 * The result is expected to be y1 if x == x1, y2 if x == x2
 * and in between it should take on proportional values
 * between y1 and y2. So for example, if the given x is
 * (x1+x2)/2, then the result should be (y1+y2)/2.
 * Similarly if the x is (3x1+x2)/4, then the result should be
 * (3y1+y2)/4 and so on. 
 */
int interpolate(xy_t xy1, xy_t xy2, int x)
    //@requires interpolate_precond(xy1, xy2, x);
    //@ensures interpolate_postcond(\result, xy1, xy2, x);
{
    // TODO: Implement this.
    return 0;
}

bool lookup_precond(xy_t [] table, int len, int N, int x) 
{
    // TODO: Implement this.
    return false;
}

bool lookup_postcond(int result, xy_t [] table, int len, int N, int x)
{
    // TODO: Implement this.
    return false;
}

void step(int *counter, int n)
    //@requires counter != NULL && (*counter) >= 0 && n >= 0;
{
    (*counter) = (*counter) + n;
}

/*
 * Performs a lookup according to what's described at the top
 * of this file. This function has an extra "counter" passed in
 * which you can increment to calculate the number of steps the
 * algorithm takes. This is just for your own convenience and
 * it is not necessary to use this "counter" argument. If you
 * are using it, you can use the helper "step" function above
 * like step(counter, 2);
 */
int lookup(xy_t [] table, int N, int x, int *counter)
    //@requires lookup_precond(table, \length(table), N, x);
    //@ensures lookup_postcond(\result, table, \length(table), N, x);
{
    // TODO: Implement this.
    step(counter, 1);
    return 0;
}

int lookup_complexity(int N)
{
    // TODO: Make this function return a value that reflects the 
    // big-O complexity of the lookup operation you've implemented.
    return 1;
}

bool lookup_is_best_algorithm()
{
    // TODO: Return true if you believe your algorithm is the fastest possible
    // for this problem. This is only up to constant factors since we're
    // interested only in O(g(n)) of your lookup algorithm.
    return false;
}

bool test_lookup()
{
    // TODO: Replace the body of this function with any test you wish to
    // run for your lookup function or any other function in this file.
    // Return true to indicate a passed test and return false to indicate
    // a failed test.
    return false;
}

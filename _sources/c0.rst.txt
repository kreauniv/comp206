More C0
=======

So far, we've only seen the ``int`` type in C0 and that it has a range of
:math:`[-2^{31},2^{31} - 1]`. There are few other basic data types that are
useful when writing programs. They are -

.. list-table:: Basic data types
    :widths: 10 50 20
    :header-rows: 1

    * - **Type**
      - **Description**
      - **Example**
    * - ``bool``
      - A variable of this type can take on one of
        two values -- ``true`` or ``false``.
      - ``bool b = 2 < 3;``
    * - ``char``
      - Holds a single ASCII character, whose literals
        are given enclosed in single quotes -- like ``'x'``.  
      - ``char ch = 'a';``
    * - ``string``
      - This is a sequence of characters and so is a compound type,
        but can be notated and treated pretty much like a basic
        type in C0 (warning: not in C though). 
      - ``string s = "hello world"``
  
Structures
----------

When we wrote the ``pow_iter`` function in python, we made an ad hoc
collection of three values into a "tuple" as shown below::

    def pow_iter(x1,y1,r1):
        (x2,y2,r2) = (x1*x1, y1//2, (r1 * x1 if y1 % 2 == 1 else r1))
        return x2,y2,r2

That's not something which is very conveniently expressed in C0.  We need to
step a little lower and make such a collection of values and their meanings
explicit. It is done using what's called a **struct** - short for "structure"::

    struct PowState {
        int x;
        int y;
        int r;
    };

The above code declares a structure named ``PowState`` which has three "fields"
named ``x``, ``y`` and ``r``. This kind of a declaration tells C0 that when
we refer to ``struct PowState``, we're talking about a group of three ``int``
values. To understand this better, let's go back to our spreadsheet interpretation
where each column is given to a specific variable and each row to its value at
a given "time step" in the function's execution. This gets interesting if we now
number the columns of our sheet like shown below --

====== ==== ==== ==== ==== ==== ======
...    23   24   25   26   27   ...
====== ==== ==== ==== ==== ==== ======
...    x    y    r    
...    10   15   1
====== ==== ==== ==== ==== ==== ======

Indirection
-----------

We can do something interesting once we have numbered columns. We can store the
number of a column in one of the variables and introduce a new operation --
``fetch the value on the column whose number is given by the value of the given
variable``. We use the words "indirection" or "lookup" for this operation.

====== ==== ==== ==== ==== ==== ======
...    23   24   25   26   27   ...
====== ==== ==== ==== ==== ==== ======
...    v     
...    25        
``*v``           42
====== ==== ==== ==== ==== ==== ======

If we're given the above table where the variable ``v`` has been given the
column numbered ``23``, then ``lookup(v)`` [#notc0]_ is intended to give the
value ``42``. In C0, such a ``lookup(v)`` operation is written simply ``*v``
and the type of ``v`` is said to be a ``pointer to an int`` which is notated
as ``int *v`` when declaring ``v``.

.. [#notc0] This is not valid C0 syntax.

... but how do we cause the number ``25`` to be placed in the column for ``v``
in the first place? To do that, we have to see that somehow the system needs
to keep track of free columns and must have the ability to give us the number
of an unoccupied column when we need one. This is the job of the ``alloc``
expression. So we can "allocate" a column and store its index in ``v``
using a statement like this::

    int *v = alloc(int);

Once we've allocated such a column and placed its number in ``v``, we can store
value in the column being referred to (a.k.a. "pointed to") by ``v`` using::

    *v = 42;

Here the notation of C0 permits using "lookup(v)" both on the right hand side
of an assignment, as well as the left hand side. When used on the RHS, ``*v``
simply fetches the current value in the column pointed to by ``v`` for use
in any calculation. When used on the LHS, it permits us to modify the value
of the column pointed to by ``v``.

Pointers to structures
----------------------

Since we know structures can be used to group variables ("fields"), we can
imagine a structure to be represented by a group of columns that are intended
to be considered together.


+----+------+-------+------+------+------+------+
|... | 23   | 24    | 25   | 26   | 27   | ...  |
+----+------+-------+------+------+------+------+
|... |      | ``struct PowState`` |      | ...  |
+====+======+=======+======+======+======+======+
|... | s    | x     | y    | r    |      | ...  |
+----+------+-------+------+------+------+------+
|... | 24   | 10    | 15   | 1    |      | ...  |
+----+------+-------+------+------+------+------+


In the above table, we've used the variable ``s`` to "point to" a structure.
We can declare that as follows::

    struct PowState *s;

... and to allocate a group of columns and store the column index in ``s``,
we use the ``alloc`` expression as follows::

    struct PowState *s = alloc(struct PowState);

Assuming ``s`` now has the index to the column 24, we can refer to the value
of the ``x``, ``y`` and ``r`` columns using::

    s->x = 10;
    s->y = 15;
    s->r = 1;

The ``->`` operator helps makes use of the information we've provided when
declaring the structure to determine which column offset to pick, starting
with the value we have in ``s``. We can also use these ``s->x`` expressions
on the RHS to calculate things with those values, ex: ``s->x * s->y``.

Given this knowledge, we can now write a version of ``pow_iter`` in C0
as follows ::

    struct PowState * pow_iter(struct PowState *s1) {
        struct PowState *s2 = alloc(struct PowState);

        s2->x = s1->x * s1->x;
        s2->y = s1->y / 2;
        if (s1->y % 2 == 1) {
            s2->r = s1->r * s1->x;
        } else {
            s2->r = s1->r;
        }

        return s2;
    }

We can use the above iterable function in ``f`` as follows ::

    int f(int x, int y) {
        struct PowState *s = alloc(struct PowState);
        s->x = x;
        s->y = y;
        while (s->y > 0) {
            s = pow_iter(s);
        }
        return s->r;
    }

Arrays
------

While ``struct``s let us bunch together a number of variables, we can only
collect together a know number of variables. What if we want to collectively
refer to a collection of ``N`` integers -- called an "array"?

We can handle this notion with the same idea of indirection. If we have in
``N`` the number of elements needed, and a "pointer to int" variable ``a``, then
if we can allocate a group of ``N`` columns declared for use as ``int``s, 
we can store the index of the first column in ``a`` and extend the notion of
``lookup`` to ``lookup(a,i)`` which would mean "take the column index in variable
``a``, add ``i`` to it, and pick the value in the column given by that number".
This is such a common operation that it is simply notated as ``a[i]``.

But how do we allocate such a block of columns dependent on ``N``? We do that as::

    int[] a = alloc_array(int, N);

The type ``int[]`` is to be read as "array of ``int``s". It is useful to read
these compound type declarations from right to left, just as ``int *`` is 
read as "pointer to ``int``".

So each element of this "array" is retrieved using ``a[i]``. We can also
use ``a[i]`` on the LHS to place values into the array columns.

Arrays of structs
-----------------

How do we interpret the code below? ::

    struct Point {
        int x;
        int y;
    };

    struct Point [] points = alloc_array(struct Point, 10);
    // Allocate an array of 10 "Point" structures.

We can then refer to the "y" field of, say, the 6th array item
as -- ``points[5].y``. [#zeroix]_


.. [#zeroix] Arrays are "zero based" -- meaning, ``a[0]`` is the
   first element of the array ``a``. That makes the index ``5``
   the 6th element.

Combining these concepts
------------------------

We now have ``int``, ``bool``, ``char``, ``string``,
``struct XYZ``, pointer to ``<type>`` and array of ``<type>``. 
These are all independent concepts, so we can combine them to create
compound structures such as "pointer to structure that has an int,
an array of chars, and a pointer to another structure". The below
code declares and initializes such a structure::

    struct Point {
        int x;
        int y;
    };

    struct Example {
        int n;
        char *chs;
        struct Point *p;
    };

    struct Example *ex = alloc(struct Example);
    ex->n = 5;
    ex->chs = alloc_array(char, ex->n);
    ex->p = alloc(struct Point);

This ability to combine these is crucial to allow us to define
complex data structures with various properties .. which we'll
see later on in this course.

Typedefs
--------

It can get pretty tedious to keep writing ``struct Point`` everywhere.
Why can't we just say ``Point`` instead? While saying ``struct Point``
does make explicit what ``Point`` is, we can give ``struct Point``
a new name using a "typedef" as shown below::

    typedef struct Point {
        int x;
        int y;
    } SPoint;

Once we do that, we can declare an array of ``SPoint``s using
``SPoint[] ps = alloc_array(SPoint, 10);`` ... treating ``SPoint``
as a genuine type in its own right.

Since the name ``Point`` is no longer relevant in the above
``typedef`` declaration, we might as well dispense with it
and write::

    typedef struct {
        int x;
        int y;
    } Point;

Thereafter, we won't have to keep saying ``struct Point`` when
``Point`` will do. In fact, after the above declaration,
``struct Point`` will cause a compilation error!
